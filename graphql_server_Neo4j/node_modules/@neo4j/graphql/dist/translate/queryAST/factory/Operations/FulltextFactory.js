"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FulltextFactory = void 0;
const cypher_builder_1 = __importDefault(require("@neo4j/cypher-builder"));
const utils_1 = require("../../../../utils/utils");
const check_authentication_1 = require("../../../authorization/check-authentication");
const ScoreField_1 = require("../../ast/fields/ScoreField");
const ScoreFilter_1 = require("../../ast/filters/property-filters/ScoreFilter");
const FulltextOperation_1 = require("../../ast/operations/FulltextOperation");
const FulltextSelection_1 = require("../../ast/selection/FulltextSelection");
const raise_on_mixed_pagination_1 = require("../../utils/raise-on-mixed-pagination");
class FulltextFactory {
    constructor(queryASTFactory) {
        this.queryASTFactory = queryASTFactory;
    }
    /**
     * @deprecated This method is deprecated an it will be removed when the deprecate fulltext operation will be removed.
     * The is the factory method that parse the deprecated syntax as movies(fulltext: { phrase: "The Matrix" }) {...}
     * To parse the new syntax movieFullText(phrase: "The Matrix") {...} use the method createFulltextOperation
     *
     **/
    createDeprecatedFulltextOperation(entity, resolveTree, context) {
        const resolveTreeWhere = this.queryASTFactory.operationsFactory.getWhereArgs(resolveTree);
        const fieldsByTypeName = resolveTree.fieldsByTypeName;
        const fullTextOptions = this.getFulltextOptions(context);
        let scoreField;
        let scoreFilter;
        (0, check_authentication_1.checkEntityAuthentication)({
            entity: entity.entity,
            targetOperations: ["READ"],
            context,
        });
        const selection = new FulltextSelection_1.FulltextSelection({
            target: entity,
            fulltext: fullTextOptions,
            scoreVariable: fullTextOptions.score,
        });
        const operation = new FulltextOperation_1.FulltextOperation({
            target: entity,
            scoreField,
            selection,
        });
        if (scoreFilter) {
            operation.addFilters(scoreFilter);
        }
        this.queryASTFactory.operationsFactory.hydrateOperation({
            operation,
            entity,
            fieldsByTypeName: fieldsByTypeName,
            context,
            whereArgs: resolveTreeWhere,
        });
        // Override sort to support score
        // SOFT_DEPRECATION: OPTIONS-ARGUMENT
        const optionsArg = (resolveTree.args.options ?? {});
        const sortArg = resolveTree.args.sort ?? optionsArg.sort;
        const limitArg = resolveTree.args.limit ?? optionsArg.limit;
        const offsetArg = resolveTree.args.offset ?? optionsArg.offset;
        (0, raise_on_mixed_pagination_1.raiseOnMixedPagination)({
            optionsArg,
            sort: resolveTree.args.sort,
            limit: resolveTree.args.limit,
            offset: resolveTree.args.offset,
        });
        const paginationOptions = this.queryASTFactory.operationsFactory.getOptions({
            entity,
            limitArg,
            offsetArg,
            sortArg,
        });
        if (paginationOptions) {
            const sort = this.queryASTFactory.sortAndPaginationFactory.createSortFields(paginationOptions, entity, context, fullTextOptions.score);
            operation.addSort(...sort);
            const pagination = this.queryASTFactory.sortAndPaginationFactory.createPagination(paginationOptions);
            if (pagination) {
                operation.addPagination(pagination);
            }
        }
        return operation;
    }
    createFulltextOperation(entity, resolveTree, context) {
        const fullTextDeprecateOperationFields = resolveTree.fieldsByTypeName[entity.operations.fulltextTypeNames.result];
        if (!fullTextDeprecateOperationFields) {
            throw new Error("Transpile error: operation not found");
        }
        const resolveTreeWhere = this.queryASTFactory.operationsFactory.getWhereArgs(resolveTree);
        const fullTextOptions = this.getFulltextOptions(context);
        let scoreField;
        let scoreFilter;
        const scoreWhere = resolveTreeWhere.score;
        const targetTypeWhere = resolveTreeWhere[entity.singular] ?? {};
        const scoreRawField = fullTextDeprecateOperationFields.score;
        const nestedResolveTree = fullTextDeprecateOperationFields[entity.singular] ?? {};
        if (scoreRawField) {
            scoreField = new ScoreField_1.ScoreField({
                alias: scoreRawField.alias,
                score: fullTextOptions.score,
            });
        }
        if (scoreWhere) {
            scoreFilter = new ScoreFilter_1.ScoreFilter({
                scoreVariable: fullTextOptions.score,
                min: scoreWhere.min,
                max: scoreWhere.max,
            });
        }
        (0, check_authentication_1.checkEntityAuthentication)({
            entity: entity.entity,
            targetOperations: ["READ"],
            context,
        });
        const selection = new FulltextSelection_1.FulltextSelection({
            target: entity,
            fulltext: fullTextOptions,
            scoreVariable: fullTextOptions.score,
        });
        const operation = new FulltextOperation_1.FulltextOperation({
            target: entity,
            scoreField,
            selection,
        });
        if (scoreFilter) {
            operation.addFilters(scoreFilter);
        }
        const fieldsByTypeName = nestedResolveTree.fieldsByTypeName ?? {};
        this.queryASTFactory.operationsFactory.hydrateOperation({
            operation,
            entity,
            fieldsByTypeName,
            context,
            whereArgs: targetTypeWhere,
        });
        // SOFT_DEPRECATION: OPTIONS-ARGUMENT
        const optionsArg = (resolveTree.args.options ?? {});
        // Override sort to support score and other fields as: { score: "DESC", movie: { title: DESC }}
        const sortArg = (0, utils_1.asArray)(resolveTree.args.sort ?? optionsArg.sort).map((field) => field[entity.singular] ?? field);
        const limitArg = resolveTree.args.limit ?? optionsArg.limit;
        const offsetArg = resolveTree.args.offset ?? optionsArg.offset;
        const paginationOptions = this.queryASTFactory.operationsFactory.getOptions({
            entity,
            limitArg,
            offsetArg,
            sortArg,
        });
        if (paginationOptions) {
            const sort = this.queryASTFactory.sortAndPaginationFactory.createSortFields(paginationOptions, entity, context, fullTextOptions.score);
            operation.addSort(...sort);
            const pagination = this.queryASTFactory.sortAndPaginationFactory.createPagination(paginationOptions);
            if (pagination) {
                operation.addPagination(pagination);
            }
        }
        return operation;
    }
    getFulltextSelection(entity, context) {
        const fulltextOptions = this.getFulltextOptions(context);
        return new FulltextSelection_1.FulltextSelection({
            target: entity,
            fulltext: fulltextOptions,
            scoreVariable: fulltextOptions.score,
        });
    }
    getFulltextOptions(context) {
        if (context.fulltext) {
            const indexName = context.fulltext.indexName ?? context.fulltext.name;
            if (indexName === undefined) {
                throw new Error("The name of the fulltext index should be defined using the indexName argument.");
            }
            const phrase = context.resolveTree.args.phrase;
            if (!phrase || typeof phrase !== "string") {
                throw new Error("Invalid phrase");
            }
            return {
                index: indexName,
                phrase,
                score: context.fulltext.scoreVariable,
            };
        }
        const entries = Object.entries(context.resolveTree.args.fulltext || {});
        if (entries.length > 1) {
            throw new Error("Can only call one search at any given time");
        }
        const [indexName, indexInput] = entries[0];
        return {
            index: indexName,
            phrase: indexInput.phrase,
            score: new cypher_builder_1.default.Variable(),
        };
    }
}
exports.FulltextFactory = FulltextFactory;
//# sourceMappingURL=FulltextFactory.js.map