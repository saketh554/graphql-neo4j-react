"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.verifyPopulatedBy = void 0;
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const graphql_1 = require("graphql");
const parse_value_node_1 = require("../../../../schema-model/parser/parse-value-node");
const document_validation_error_1 = require("../utils/document-validation-error");
const utils_1 = require("../utils/utils");
function verifyPopulatedBy(callbacks) {
    return function ({ directiveNode, traversedDef, }) {
        const callbackArg = directiveNode.arguments?.find((x) => x.name.value === "callback");
        if (!callbackArg) {
            // delegate to DirectiveArgumentOfCorrectType rule
            return;
        }
        if (traversedDef.kind !== graphql_1.Kind.FIELD_DEFINITION) {
            // delegate to KnownDirectivesRule
            return;
        }
        const callbackName = (0, parse_value_node_1.parseValueNode)(callbackArg.value);
        if (!callbacks) {
            throw new document_validation_error_1.DocumentValidationError(`@populatedBy.callback needs to be provided in features option.`, [
                "callback",
            ]);
        }
        if (typeof (callbacks || {})[callbackName] !== "function") {
            throw new document_validation_error_1.DocumentValidationError(`@populatedBy.callback \`${callbackName}\` must be of type Function.`, [
                "callback",
            ]);
        }
        if (![
            "Int",
            "Float",
            "String",
            "Boolean",
            "ID",
            "BigInt",
            "DateTime",
            "Date",
            "Time",
            "LocalDateTime",
            "LocalTime",
            "Duration",
        ].includes((0, utils_1.getInnerTypeName)(traversedDef.type))) {
            throw new document_validation_error_1.DocumentValidationError("@populatedBy can only be used on fields of type Int, Float, String, Boolean, ID, BigInt, DateTime, Date, Time, LocalDateTime, LocalTime or Duration.", []);
        }
    };
}
exports.verifyPopulatedBy = verifyPopulatedBy;
//# sourceMappingURL=populatedBy.js.map