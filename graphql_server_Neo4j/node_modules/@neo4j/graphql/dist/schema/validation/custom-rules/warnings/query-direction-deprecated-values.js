"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.WarnIfQueryDirectionIsUsedWithDeprecatedValues = void 0;
const graphql_1 = require("graphql");
const constants_1 = require("../../../../constants");
const directives_1 = require("../../../../graphql/directives");
function WarnIfQueryDirectionIsUsedWithDeprecatedValues() {
    let warningAlreadyIssued = false;
    return {
        Directive(directive) {
            if (warningAlreadyIssued) {
                return;
            }
            if (directives_1.relationshipDirective.name === directive.name.value) {
                const queryDirection = directive.arguments?.find((arg) => arg.name.value === "queryDirection");
                const queryDirectionValue = queryDirection && queryDirection.value.kind === graphql_1.Kind.ENUM && queryDirection.value.value;
                if (queryDirectionValue &&
                    [
                        constants_1.RelationshipQueryDirectionOption[constants_1.RelationshipQueryDirectionOption.DEFAULT_DIRECTED],
                        constants_1.RelationshipQueryDirectionOption[constants_1.RelationshipQueryDirectionOption.DEFAULT_UNDIRECTED],
                    ].includes(constants_1.RelationshipQueryDirectionOption[queryDirectionValue])) {
                    console.warn(`Found @relationship argument "queryDirection" used with ${queryDirectionValue} which is deprecated. \n These default values were used to set a default for the "directed" argument, which is also now deprecated.`);
                    warningAlreadyIssued = true;
                }
                if (queryDirectionValue &&
                    [
                        constants_1.RelationshipQueryDirectionOption[constants_1.RelationshipQueryDirectionOption.DIRECTED_ONLY],
                        constants_1.RelationshipQueryDirectionOption[constants_1.RelationshipQueryDirectionOption.UNDIRECTED_ONLY],
                    ].includes(constants_1.RelationshipQueryDirectionOption[queryDirectionValue])) {
                    console.warn(`Found @relationship argument "queryDirection" used with ${queryDirectionValue} which is deprecated. Please use "DIRECTED" or "UNDIRECTED" instead.`);
                    warningAlreadyIssued = true;
                }
            }
        },
    };
}
exports.WarnIfQueryDirectionIsUsedWithDeprecatedValues = WarnIfQueryDirectionIsUsedWithDeprecatedValues;
//# sourceMappingURL=query-direction-deprecated-values.js.map