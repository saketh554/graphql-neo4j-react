"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseFilterProperty = void 0;
const parse_where_field_1 = require("../../../../../translate/queryAST/factory/parsers/parse-where-field");
function parseFilterProperty(key) {
    // eslint-disable-next-line prefer-const
    let { fieldName, operator, isNot } = (0, parse_where_field_1.parseWhereField)(key);
    // These conversions are only temporary necessary until the the _NOT operator exists, after that we can just return the output of parseWhereField
    if (operator === "EQ") {
        operator = undefined;
    }
    if (isNot) {
        if (operator && isOperatorIsANegateSupportedOperator(operator)) {
            operator = `NOT_${operator}`;
        }
        else {
            operator = "NOT";
        }
    }
    return { fieldName, operator };
}
exports.parseFilterProperty = parseFilterProperty;
/**
 * isOperatorIsANegateSupportedOperator returns true if the operator is one of these that have the negate version
 * the following is temporary required until the `_NOT` operator is removed.
 **/
function isOperatorIsANegateSupportedOperator(operator) {
    return ["CONTAINS", "STARTS_WITH", "ENDS_WITH", "IN", "INCLUDES"].includes(operator);
}
//# sourceMappingURL=parse-filter-property.js.map