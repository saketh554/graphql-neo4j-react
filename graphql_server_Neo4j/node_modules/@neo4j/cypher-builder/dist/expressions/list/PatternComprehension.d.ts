import { WithWhere } from "../../clauses/mixins/sub-clauses/WithWhere";
import { CypherASTNode } from "../../CypherASTNode";
import type { CypherEnvironment } from "../../Environment";
import { Pattern } from "../../pattern/Pattern";
import type { NodeRef } from "../../references/NodeRef";
import type { Expr } from "../../types";
export interface PatternComprehension extends WithWhere {
}
/** Represents a Pattern comprehension
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/syntax/lists/#cypher-pattern-comprehension)
 * @group Patterns
 */
export declare class PatternComprehension extends CypherASTNode {
    private readonly pattern;
    private mapExpr;
    constructor(pattern: Pattern);
    /** @deprecated Use `.map` instead of a second argument */
    constructor(pattern: Pattern, mapExpr?: Expr);
    /** @deprecated Use {@link Pattern} instead */
    constructor(pattern: NodeRef, mapExpr?: Expr);
    map(mapExpr: Expr): this;
    /**
     * @internal
     */
    getCypher(env: CypherEnvironment): string;
}
