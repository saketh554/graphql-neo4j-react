"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.cypherDatetime = cypherDatetime;
exports.cypherDate = cypherDate;
exports.cypherLocalDatetime = cypherLocalDatetime;
exports.cypherLocalTime = cypherLocalTime;
exports.cypherTime = cypherTime;
exports.duration = duration;
const Literal_1 = require("../../references/Literal");
const normalize_variable_1 = require("../../utils/normalize-variable");
const CypherFunctions_1 = require("./CypherFunctions");
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/temporal/#functions-datetime)
 * @group Cypher Functions
 * @category Temporal
 */
function cypherDatetime(timezone) {
    return dateFunction("datetime", timezone);
}
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/temporal/#functions-datetime-timestamp)
 * @group Cypher Functions
 * @category Temporal
 */
cypherDatetime.fromepoch = (seconds, nanoseconds) => {
    const secondsExpr = (0, normalize_variable_1.normalizeExpr)(seconds);
    const nanosecondsExpr = (0, normalize_variable_1.normalizeExpr)(nanoseconds);
    return new CypherFunctions_1.CypherFunction("datetime.fromepoch", [secondsExpr, nanosecondsExpr]);
};
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/temporal/#functions-datetime-timestamp)
 * @group Cypher Functions
 * @category Temporal
 */
cypherDatetime.fromepochmilis = (seconds, nanoseconds) => {
    const secondsExpr = (0, normalize_variable_1.normalizeExpr)(seconds);
    const nanosecondsExpr = (0, normalize_variable_1.normalizeExpr)(nanoseconds);
    return new CypherFunctions_1.CypherFunction("datetime.fromepochmilis", [secondsExpr, nanosecondsExpr]);
};
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/temporal/#functions-datetime-realtime)
 * @group Cypher Functions
 * @category Temporal
 */
cypherDatetime.realtime = (timezone) => {
    return dateFunction("datetime.realtime", timezone);
};
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/temporal/#functions-datetime-statement)
 * @group Cypher Functions
 * @category Temporal
 */
cypherDatetime.statement = (timezone) => {
    return dateFunction("datetime.statement", timezone);
};
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/temporal/#functions-datetime-transaction)
 * @group Cypher Functions
 * @category Temporal
 */
cypherDatetime.transaction = (timezone) => {
    return dateFunction("datetime.transaction", timezone);
};
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/temporal/#functions-datetime-truncate)
 * @group Cypher Functions
 * @category Temporal
 */
cypherDatetime.truncate = (unit, temporalInstantValue, mapOfComponentsTimezone) => {
    const unitLiteral = new Literal_1.Literal(unit);
    const params = [unitLiteral, temporalInstantValue];
    if (mapOfComponentsTimezone)
        params.push(mapOfComponentsTimezone);
    return new CypherFunctions_1.CypherFunction("datetime.truncate", params);
};
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/temporal/#functions-date)
 * @group Cypher Functions
 * @category Temporal
 * @example
 *
 * Date without parameters:
 *
 * ```ts
 * Cypher.date()
 * ```
 *
 * _Cypher:_
 * ```cypher
 * date()
 * ```
 *
 * @example
 * Date with parameters:
 *
 * ```ts
 * Cypher.date(new Cypher.param('9999-01-01'))
 * ```
 *
 * _Cypher:_
 * ```cypher
 * date($param1)
 * ```
 */
function cypherDate(timezone) {
    return dateFunction("date", timezone);
}
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/temporal/#functions-date-realtime)
 * @group Cypher Functions
 * @category Temporal
 */
cypherDate.realtime = (timezone) => {
    return dateFunction("date.realtime", timezone);
};
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/temporal/#functions-date-statement)
 * @group Cypher Functions
 * @category Temporal
 */
cypherDate.statement = (timezone) => {
    return dateFunction("date.statement", timezone);
};
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/temporal/#functions-date-transaction)
 * @group Cypher Functions
 * @category Temporal
 */
cypherDate.transaction = (timezone) => {
    return dateFunction("date.transaction", timezone);
};
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/temporal/#functions-date-truncate)
 * @group Cypher Functions
 * @category Temporal
 */
cypherDate.truncate = (unit, temporalInstantValue, mapOfComponentsTimezone) => {
    const unitLiteral = new Literal_1.Literal(unit);
    const params = [unitLiteral, temporalInstantValue];
    if (mapOfComponentsTimezone)
        params.push(mapOfComponentsTimezone);
    return new CypherFunctions_1.CypherFunction("date.truncate", params);
};
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/temporal/#functions-localdatetime)
 * @group Cypher Functions
 * @category Temporal
 */
function cypherLocalDatetime(timezone) {
    return dateFunction("localdatetime", timezone);
}
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/temporal/#functions-localdatetime-realtime)
 * @group Cypher Functions
 * @category Temporal
 */
cypherLocalDatetime.realtime = (timezone) => {
    return dateFunction("localdatetime.realtime", timezone);
};
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/temporal/#functions-localdatetime-statement)
 * @group Cypher Functions
 * @category Temporal
 */
cypherLocalDatetime.statement = (timezone) => {
    return dateFunction("localdatetime.statement", timezone);
};
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/temporal/#functions-localdatetime-transaction)
 * @group Cypher Functions
 * @category Temporal
 */
cypherLocalDatetime.transaction = (timezone) => {
    return dateFunction("localdatetime.transaction", timezone);
};
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/temporal/#functions-localdatetime-truncate)
 * @group Cypher Functions
 * @category Temporal
 */
cypherLocalDatetime.truncate = (unit, temporalInstantValue, mapOfComponentsTimezone) => {
    const unitLiteral = new Literal_1.Literal(unit);
    const params = [unitLiteral, temporalInstantValue];
    if (mapOfComponentsTimezone)
        params.push(mapOfComponentsTimezone);
    return new CypherFunctions_1.CypherFunction("localdatetime.truncate", params);
};
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/temporal/#functions-localtime)
 * @group Cypher Functions
 * @category Temporal
 */
function cypherLocalTime(timezone) {
    return dateFunction("localtime", timezone);
}
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/temporal/#functions-localtime-realtime)
 * @group Cypher Functions
 * @category Temporal
 */
cypherLocalTime.realtime = (timezone) => {
    return dateFunction("localtime.realtime", timezone);
};
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/temporal/#functions-localtime-statement)
 * @group Cypher Functions
 * @category Temporal
 */
cypherLocalTime.statement = (timezone) => {
    return dateFunction("localtime.statement", timezone);
};
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/temporal/#functions-localtime-transaction)
 * @group Cypher Functions
 * @category Temporal
 */
cypherLocalTime.transaction = (timezone) => {
    return dateFunction("localtime.transaction", timezone);
};
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/temporal/#functions-localtime-truncate)
 * @group Cypher Functions
 * @category Temporal
 */
cypherLocalTime.truncate = (unit, temporalInstantValue, mapOfComponentsTimezone) => {
    const unitLiteral = new Literal_1.Literal(unit);
    const params = [unitLiteral, temporalInstantValue];
    if (mapOfComponentsTimezone)
        params.push(mapOfComponentsTimezone);
    return new CypherFunctions_1.CypherFunction("localtime.truncate", params);
};
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/temporal/#functions-time)
 * @group Cypher Functions
 * @category Temporal
 */
function cypherTime(timezone) {
    return dateFunction("time", timezone);
}
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/temporal/#functions-time-realtime)
 * @group Cypher Functions
 * @category Temporal
 */
cypherTime.realtime = (timezone) => {
    return dateFunction("time.realtime", timezone);
};
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/temporal/#functions-time-statement)
 * @group Cypher Functions
 * @category Temporal
 */
cypherTime.statement = (timezone) => {
    return dateFunction("time.statement", timezone);
};
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/temporal/#functions-time-transaction)
 * @group Cypher Functions
 * @category Temporal
 */
cypherTime.transaction = (timezone) => {
    return dateFunction("time.transaction", timezone);
};
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/temporal/#functions-time-truncate)
 * @group Cypher Functions
 * @category Temporal
 */
cypherTime.truncate = (unit, temporalInstantValue, mapOfComponentsTimezone) => {
    const unitLiteral = new Literal_1.Literal(unit);
    const params = [unitLiteral, temporalInstantValue];
    if (mapOfComponentsTimezone)
        params.push(mapOfComponentsTimezone);
    return new CypherFunctions_1.CypherFunction("time.truncate", params);
};
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/temporal/duration)
 * @group Cypher Functions
 * @category Temporal
 */
function duration(components) {
    return new CypherFunctions_1.CypherFunction("duration", [components]);
}
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/temporal/duration/#functions-duration-between)
 * @group Cypher Functions
 * @category Temporal
 */
duration.between = (instant1, instant2) => {
    return new CypherFunctions_1.CypherFunction("duration.between", [instant1, instant2]);
};
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/temporal/duration/#functions-duration-inmonths)
 * @group Cypher Functions
 * @category Temporal
 */
duration.inMonths = (instant1, instant2) => {
    return new CypherFunctions_1.CypherFunction("duration.inMonths", [instant1, instant2]);
};
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/temporal/duration/#functions-duration-indays)
 * @group Cypher Functions
 * @category Temporal
 */
duration.inDays = (instant1, instant2) => {
    return new CypherFunctions_1.CypherFunction("duration.inDays", [instant1, instant2]);
};
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/temporal/duration/#functions-duration-inseconds)
 * @group Cypher Functions
 * @category Temporal
 */
duration.inSeconds = (instant1, instant2) => {
    return new CypherFunctions_1.CypherFunction("duration.inSeconds", [instant1, instant2]);
};
// Handles optional timezone param before creating a function
function dateFunction(name, timezone) {
    return new CypherFunctions_1.CypherFunction(name, timezone ? [timezone] : undefined);
}
