"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.btrim = btrim;
exports.left = left;
exports.lower = lower;
exports.lTrim = lTrim;
exports.ltrim = ltrim;
exports.normalize = normalize;
exports.replace = replace;
exports.right = right;
exports.rTrim = rTrim;
exports.rtrim = rtrim;
exports.split = split;
exports.substring = substring;
exports.toLower = toLower;
exports.toString = toString;
exports.toStringOrNull = toStringOrNull;
exports.toUpper = toUpper;
exports.trim = trim;
exports.upper = upper;
const filter_truthy_1 = require("../../utils/filter-truthy");
const normalize_variable_1 = require("../../utils/normalize-variable");
const CypherFunctions_1 = require("./CypherFunctions");
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/string/#functions-btrim)
 * @group Cypher Functions
 * @category String
 */
function btrim(original, trimCharacter) {
    const normalizedOriginal = (0, normalize_variable_1.normalizeExpr)(original);
    const normalizedTrimCharacter = trimCharacter ? (0, normalize_variable_1.normalizeExpr)(trimCharacter) : undefined;
    return new CypherFunctions_1.CypherFunction("btrim", (0, filter_truthy_1.filterTruthy)([normalizedOriginal, normalizedTrimCharacter]));
}
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/string/#functions-left)
 * @group Cypher Functions
 * @category String
 */
function left(original, length) {
    return new CypherFunctions_1.CypherFunction("left", [original, length]);
}
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/string/#functions-lower)
 * @group Cypher Functions
 * @category String
 */
function lower(original) {
    return new CypherFunctions_1.CypherFunction("lower", [original]);
}
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/string/#functions-ltrim)
 * @group Cypher Functions
 * @category String
 * @deprecated Use {@link ltrim} instead
 */
function lTrim(original, trimCharacter) {
    const normalizedOriginal = (0, normalize_variable_1.normalizeExpr)(original);
    const normalizedTrimCharacter = trimCharacter ? (0, normalize_variable_1.normalizeExpr)(trimCharacter) : undefined;
    return new CypherFunctions_1.CypherFunction("lTrim", (0, filter_truthy_1.filterTruthy)([normalizedOriginal, normalizedTrimCharacter]));
}
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/string/)
 * @group Cypher Functions
 * @category String
 */
function ltrim(original, trimCharacter) {
    const normalizedOriginal = (0, normalize_variable_1.normalizeExpr)(original);
    const normalizedTrimCharacter = trimCharacter ? (0, normalize_variable_1.normalizeExpr)(trimCharacter) : undefined;
    return new CypherFunctions_1.CypherFunction("ltrim", (0, filter_truthy_1.filterTruthy)([normalizedOriginal, normalizedTrimCharacter]));
}
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/string/)
 * @group Cypher Functions
 * @category String
 * @param normalForm - A string with the normal form to use or a Cypher expression
 * @example `Cypher.normalize(param, "NFC")`
 */
function normalize(input, normalForm) {
    const normalFormExpr = normalForm ? (0, normalize_variable_1.normalizeExpr)(normalForm) : undefined;
    return new CypherFunctions_1.CypherFunction("normalize", (0, filter_truthy_1.filterTruthy)([input, normalFormExpr]));
}
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/string/)
 * @group Cypher Functions
 * @category String
 */
function replace(original, search, replace) {
    return new CypherFunctions_1.CypherFunction("replace", [original, search, replace]);
}
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/string/)
 * @group Cypher Functions
 * @category List
 * @category String
 */
function right(original, length) {
    return new CypherFunctions_1.CypherFunction("right", [original, length]);
}
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/string/)
 * @group Cypher Functions
 * @category String
 * @deprecated Use {@link rtrim} instead
 */
function rTrim(original, trimCharacter) {
    const normalizedOriginal = (0, normalize_variable_1.normalizeExpr)(original);
    const normalizedTrimCharacter = trimCharacter ? (0, normalize_variable_1.normalizeExpr)(trimCharacter) : undefined;
    return new CypherFunctions_1.CypherFunction("rTrim", (0, filter_truthy_1.filterTruthy)([normalizedOriginal, normalizedTrimCharacter]));
}
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/string/)
 * @group Cypher Functions
 * @category String
 */
function rtrim(original, trimCharacter) {
    const normalizedOriginal = (0, normalize_variable_1.normalizeExpr)(original);
    const normalizedTrimCharacter = trimCharacter ? (0, normalize_variable_1.normalizeExpr)(trimCharacter) : undefined;
    return new CypherFunctions_1.CypherFunction("rtrim", (0, filter_truthy_1.filterTruthy)([normalizedOriginal, normalizedTrimCharacter]));
}
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/string/)
 * @group Cypher Functions
 * @category String
 */
function split(original, delimiter) {
    return new CypherFunctions_1.CypherFunction("split", [original, delimiter]);
}
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/string/)
 * @group Cypher Functions
 * @category String
 */
function substring(original, start, length) {
    return new CypherFunctions_1.CypherFunction("substring", (0, filter_truthy_1.filterTruthy)([original, start, length]));
}
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/string/)
 * @group Cypher Functions
 * @category String
 */
function toLower(original) {
    return new CypherFunctions_1.CypherFunction("toLower", [original]);
}
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/string/)
 * @group Cypher Functions
 * @category String
 */
function toString(expression) {
    return new CypherFunctions_1.CypherFunction("toString", [expression]);
}
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/string/)
 * @group Cypher Functions
 * @category String
 */
function toStringOrNull(expression) {
    return new CypherFunctions_1.CypherFunction("toStringOrNull", [expression]);
}
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/string/)
 * @group Cypher Functions
 * @category String
 */
function toUpper(original) {
    return new CypherFunctions_1.CypherFunction("toUpper", [original]);
}
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/string/)
 * @group Cypher Functions
 * @category String
 */
function trim(original) {
    return new CypherFunctions_1.CypherFunction("trim", [original]);
}
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/string/#functions-upper)
 * @group Cypher Functions
 * @category String
 */
function upper(original) {
    return new CypherFunctions_1.CypherFunction("upper", [original]);
}
