"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.coalesce = coalesce;
exports.elementId = elementId;
exports.endNode = endNode;
exports.head = head;
exports.id = id;
exports.last = last;
exports.length = length;
exports.properties = properties;
exports.randomUUID = randomUUID;
exports.size = size;
exports.startNode = startNode;
exports.timestamp = timestamp;
exports.toBoolean = toBoolean;
exports.toBooleanOrNull = toBooleanOrNull;
exports.toFloat = toFloat;
exports.toFloatOrNull = toFloatOrNull;
exports.toInteger = toInteger;
exports.toIntegerOrNull = toIntegerOrNull;
exports.type = type;
exports.valueType = valueType;
exports.char_length = char_length;
exports.character_length = character_length;
exports.nullIf = nullIf;
const __1 = require("../..");
const CypherFunctions_1 = require("./CypherFunctions");
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/scalar/#functions-coalesce)
 * @group Cypher Functions
 * @category Scalar
 */
function coalesce(expr, ...optionalExpr) {
    return new CypherFunctions_1.CypherFunction("coalesce", [expr, ...optionalExpr]);
}
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/scalar/#functions-elementid)
 * @group Cypher Functions
 * @category Scalar
 */
function elementId(variable) {
    return new CypherFunctions_1.CypherFunction("elementId", [variable]);
}
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/scalar/#functions-endnode)
 * @group Cypher Functions
 * @category Scalar
 */
function endNode(relationship) {
    return new CypherFunctions_1.CypherFunction("endNode", [relationship]);
}
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/scalar/#functions-head)
 * @group Cypher Functions
 * @category Scalar
 */
function head(expr) {
    return new CypherFunctions_1.CypherFunction("head", [expr]);
}
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/scalar/#functions-id)
 * @group Cypher Functions
 * @category Scalar
 * @deprecated Use {@link elementId} instead
 */
function id(variable) {
    return new CypherFunctions_1.CypherFunction("id", [variable]);
}
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/scalar/#functions-last)
 * @group Cypher Functions
 * @category Scalar
 */
function last(expr) {
    return new CypherFunctions_1.CypherFunction("last", [expr]);
}
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/scalar/#functions-length)
 * @group Cypher Functions
 * @category Scalar
 */
function length(path) {
    return new CypherFunctions_1.CypherFunction("length", [path]);
}
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/scalar/#functions-properties)
 * @group Cypher Functions
 * @category Scalar
 */
function properties(expr) {
    return new CypherFunctions_1.CypherFunction("properties", [expr]);
}
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/scalar/#functions-randomuuid)
 * @group Cypher Functions
 * @category Scalar
 */
function randomUUID() {
    return new CypherFunctions_1.CypherFunction("randomUUID");
}
function size(expr) {
    // Support for patterns in size() in Neo4j 4
    // Using Raw to avoid adding Patterns to CypherFunction
    const sizeParam = new __1.Raw((env) => {
        return env.compile(expr);
    });
    return new CypherFunctions_1.CypherFunction("size", [sizeParam]);
}
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/scalar/#functions-startnode)
 * @group Cypher Functions
 * @category Scalar
 */
function startNode(relationship) {
    return new CypherFunctions_1.CypherFunction("startNode", [relationship]);
}
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/scalar/#functions-timestamp)
 * @group Cypher Functions
 * @category Scalar
 */
function timestamp() {
    return new CypherFunctions_1.CypherFunction("timestamp");
}
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/scalar/#functions-toboolean)
 * @group Cypher Functions
 * @category Scalar
 */
function toBoolean(expr) {
    return new CypherFunctions_1.CypherFunction("toBoolean", [expr]);
}
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/scalar/#functions-tobooleanornull)
 * @group Cypher Functions
 * @category Scalar
 */
function toBooleanOrNull(expr) {
    return new CypherFunctions_1.CypherFunction("toBooleanOrNull", [expr]);
}
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/scalar/#functions-tofloat)
 * @group Cypher Functions
 * @category Scalar
 */
function toFloat(expr) {
    return new CypherFunctions_1.CypherFunction("toFloat", [expr]);
}
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/scalar/#functions-tofloatornull)
 * @group Cypher Functions
 * @category Scalar
 */
function toFloatOrNull(expr) {
    return new CypherFunctions_1.CypherFunction("toFloatOrNull", [expr]);
}
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/scalar/#functions-tointeger)
 * @group Cypher Functions
 * @category Scalar
 */
function toInteger(expr) {
    return new CypherFunctions_1.CypherFunction("toInteger", [expr]);
}
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/scalar/#functions-tointegerornull)
 * @group Cypher Functions
 * @category Scalar
 */
function toIntegerOrNull(expr) {
    return new CypherFunctions_1.CypherFunction("toIntegerOrNull", [expr]);
}
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/scalar/#functions-type)
 * @group Cypher Functions
 * @category Scalar
 */
function type(relationship) {
    return new CypherFunctions_1.CypherFunction("type", [relationship]);
}
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/scalar/#functions-valueType)
 * @group Cypher Functions
 * @category Scalar
 */
function valueType(expr) {
    return new CypherFunctions_1.CypherFunction("valueType", [expr]);
}
/** Alias of size()
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/scalar/#functions-char_length)
 * @group Cypher Functions
 * @category Scalar
 */
function char_length(expr) {
    return new CypherFunctions_1.CypherFunction("char_length", [expr]);
}
/** Alias of size()
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/scalar/#functions-character_length)
 * @group Cypher Functions
 * @category Scalar
 * @version Neo4j 5.13
 */
function character_length(expr) {
    return new CypherFunctions_1.CypherFunction("character_length", [expr]);
}
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/functions/scalar/#functions-nullIf)
 * @group Cypher Functions
 * @category Scalar
 * @version Neo4j 5.14
 */
function nullIf(expr1, expr2) {
    return new CypherFunctions_1.CypherFunction("nullIf", [expr1, expr2]);
}
