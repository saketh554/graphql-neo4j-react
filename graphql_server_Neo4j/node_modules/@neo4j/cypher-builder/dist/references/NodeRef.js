"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.NamedNode = exports.NodeRef = void 0;
const HasLabel_1 = require("../expressions/HasLabel");
const label_expressions_1 = require("../expressions/labels/label-expressions");
const Label_1 = require("./Label");
const Variable_1 = require("./Variable");
/** Represents a node reference
 * @group Variables
 */
class NodeRef extends Variable_1.Variable {
    constructor(options = {}) {
        super();
        this.prefix = "this";
        this.labels = this.parseLabels(options.labels);
    }
    hasLabels(...labels) {
        return new HasLabel_1.HasLabel(this, labels);
    }
    hasLabel(label) {
        if (typeof label === "string") {
            return new HasLabel_1.HasLabel(this, [label]);
        }
        else {
            return new HasLabel_1.HasLabel(this, label);
        }
    }
    label(label) {
        return new Label_1.Label(this, label);
    }
    parseLabels(labelsOption) {
        if (labelsOption instanceof label_expressions_1.LabelExpr)
            return labelsOption;
        return Array.from(labelsOption ?? []);
    }
}
exports.NodeRef = NodeRef;
/** Represents a node reference with a given name
 * @group Variables
 */
class NamedNode extends NodeRef {
    constructor(id, options) {
        super(options ?? {});
        this.id = id;
    }
    get name() {
        return this.id;
    }
}
exports.NamedNode = NamedNode;
