"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.NamedPath = exports.Path = exports.NamedPathVariable = exports.PathVariable = void 0;
const Variable_1 = require("./Variable");
/** Reference to a path variable
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/syntax/patterns)
 * @group Variables
 */
class PathVariable extends Variable_1.Variable {
    constructor() {
        super();
        this.prefix = "p";
    }
}
exports.PathVariable = PathVariable;
/** For compatibility reasons, represents a path as a variable with the given name
 *  @group Variables
 */
class NamedPathVariable extends PathVariable {
    constructor(name) {
        super();
        this.id = name;
        this.prefix = "";
    }
}
exports.NamedPathVariable = NamedPathVariable;
/** Reference to a variable
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/syntax/patterns)
 * @group Variables
 * @deprecated Use {@link PathVariable} instead
 */
class Path extends PathVariable {
}
exports.Path = Path;
/** For compatibility reasons, represents a path as a variable with the given name
 *  @group Variables
 *  @deprecated Use {@link NamedPathVariable} instead
 */
class NamedPath extends NamedPathVariable {
}
exports.NamedPath = NamedPath;
