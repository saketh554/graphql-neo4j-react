import { HasLabel } from "../expressions/HasLabel";
import type { LabelExpr } from "../expressions/labels/label-expressions";
import type { Expr } from "../types";
import type { NodeRef } from "./NodeRef";
import type { NamedReference } from "./Variable";
import { Variable } from "./Variable";
export type RelationshipInput = {
    source: NodeRef;
    target: NodeRef;
    type?: string;
};
export type RelationshipProperties = Record<string, Expr>;
type RelationshipRefOptions = {
    type?: string | LabelExpr;
};
/** Reference to a relationship property
 * @group Variables
 */
export declare class RelationshipRef extends Variable {
    private readonly _type;
    constructor();
    /** @deprecated Relationship types should be defined in {@link Pattern} */
    constructor(input: RelationshipRefOptions);
    hasType(label: string | LabelExpr): HasLabel;
    get type(): string | LabelExpr | undefined;
}
/** Represents a relationship reference with a given name
 * @group Variables
 */
export declare class NamedRelationship extends RelationshipRef implements NamedReference {
    readonly id: string;
    constructor(id: string);
    /** @deprecated */
    constructor(id: string, options?: RelationshipRefOptions);
    get name(): string;
}
export {};
