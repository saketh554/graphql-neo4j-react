import type { CypherEnvironment } from "../Environment";
import { WithWhere } from "../clauses/mixins/sub-clauses/WithWhere";
import type { RelationshipProperties } from "../references/RelationshipRef";
import type { Variable } from "../references/Variable";
import type { NodePattern, RelationshipPattern } from "./Pattern";
import { Pattern } from "./Pattern";
import { PatternElement } from "./PatternElement";
export interface PartialPattern extends WithWhere {
}
export type LengthOption = number | "*" | {
    min: number;
    max?: number;
} | {
    min?: number;
    max: number;
} | {
    min: number;
    max: number;
};
/** Partial pattern, cannot be used until connected to a node
 * @group Patterns
 */
export declare class PartialPattern extends PatternElement {
    private length;
    private withType;
    private withVariable;
    private direction;
    private readonly previous;
    private properties;
    private readonly type;
    constructor(variable: Variable | undefined, options: RelationshipPattern, previous: Pattern);
    to(node: Variable, options?: NodePattern): Pattern;
    to(nodeConfig?: NodePattern): Pattern;
    /** @deprecated */
    withoutType(): this;
    /** @deprecated */
    withoutVariable(): this;
    /** @deprecated */
    withDirection(direction: "left" | "right" | "undirected"): this;
    /** @deprecated Use `properties` field in `related` instead: `new Cypher.Pattern().related({variable: rel, properties: myProperties})` */
    withProperties(properties: RelationshipProperties): this;
    /** @deprecated Use `length` field in `related` instead: `new Cypher.Pattern().related({variable: rel, length: "*"})` */
    withLength(option: LengthOption): this;
    /** @deprecated This method won't be available in future versions as variables will not be autogenerated by Patterns anymore. */
    getVariables(): Variable[];
    /**
     * @internal
     */
    getCypher(env: CypherEnvironment): string;
    private generateLengthStr;
    private getTypeStr;
}
