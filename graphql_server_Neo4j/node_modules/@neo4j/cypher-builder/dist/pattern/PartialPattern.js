"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PartialPattern = void 0;
const WithWhere_1 = require("../clauses/mixins/sub-clauses/WithWhere");
const mixin_1 = require("../clauses/utils/mixin");
const NodeRef_1 = require("../references/NodeRef");
const RelationshipRef_1 = require("../references/RelationshipRef");
const compile_cypher_if_exists_1 = require("../utils/compile-cypher-if-exists");
const Pattern_1 = require("./Pattern");
const PatternElement_1 = require("./PatternElement");
const labels_to_string_1 = require("./labels-to-string");
/** Partial pattern, cannot be used until connected to a node
 * @group Patterns
 */
let PartialPattern = class PartialPattern extends PatternElement_1.PatternElement {
    constructor(variable, options, previous) {
        super(variable ?? new RelationshipRef_1.RelationshipRef());
        this.withType = true;
        this.withVariable = true;
        // Emulates not having a variable if the config option is passed without one
        if (!variable) {
            this.withVariable = false;
        }
        this.type = options.type;
        this.properties = options.properties;
        this.previous = previous;
        this.direction = options.direction ?? "right";
        this.length = options.length;
    }
    to(node, options) {
        if (!node)
            node = new NodeRef_1.NodeRef();
        return new Pattern_1.Pattern(node, options, this);
    }
    /** @deprecated */
    withoutType() {
        this.withType = false;
        return this;
    }
    /** @deprecated */
    withoutVariable() {
        this.withVariable = false;
        return this;
    }
    /** @deprecated */
    withDirection(direction) {
        this.direction = direction;
        return this;
    }
    /** @deprecated Use `properties` field in `related` instead: `new Cypher.Pattern().related({variable: rel, properties: myProperties})` */
    withProperties(properties) {
        this.properties = properties;
        return this;
    }
    /** @deprecated Use `length` field in `related` instead: `new Cypher.Pattern().related({variable: rel, length: "*"})` */
    withLength(option) {
        this.length = option;
        return this;
    }
    /** @deprecated This method won't be available in future versions as variables will not be autogenerated by Patterns anymore. */
    getVariables() {
        const prevVars = this.previous.getVariables();
        prevVars.push(this.element);
        return prevVars;
    }
    /**
     * @internal
     */
    getCypher(env) {
        const prevStr = this.previous.getCypher(env);
        const typeStr = this.getTypeStr(env);
        const relStr = this.withVariable ? `${this.element.getCypher(env)}` : "";
        const propertiesStr = this.properties ? this.serializeParameters(this.properties, env) : "";
        const whereStr = (0, compile_cypher_if_exists_1.compileCypherIfExists)(this.whereSubClause, env, { prefix: " " });
        const lengthStr = this.generateLengthStr();
        const leftArrow = this.direction === "left" ? "<-" : "-";
        const rightArrow = this.direction === "right" ? "->" : "-";
        return `${prevStr}${leftArrow}[${relStr}${typeStr}${lengthStr}${whereStr}${propertiesStr}]${rightArrow}`;
    }
    generateLengthStr() {
        if (this.length === undefined)
            return "";
        if (typeof this.length === "number") {
            return `*${this.length}`;
        }
        else if (this.length === "*") {
            return "*";
        }
        else {
            return `*${this.length.min ?? ""}..${this.length.max ?? ""}`;
        }
    }
    getTypeStr(env) {
        if (!this.withType) {
            return "";
        }
        if (this.type) {
            return (0, labels_to_string_1.labelsToString)(this.type, env);
        }
        else if (this.element instanceof RelationshipRef_1.RelationshipRef) {
            return (0, labels_to_string_1.labelsToString)(this.element.type ?? [], env);
        }
        return "";
    }
};
exports.PartialPattern = PartialPattern;
exports.PartialPattern = PartialPattern = __decorate([
    (0, mixin_1.mixin)(WithWhere_1.WithWhere)
], PartialPattern);
