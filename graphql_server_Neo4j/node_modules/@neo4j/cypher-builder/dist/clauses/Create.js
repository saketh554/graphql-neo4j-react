"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var Create_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Create = void 0;
const PathAssign_1 = require("../pattern/PathAssign");
const Pattern_1 = require("../pattern/Pattern");
const compile_cypher_if_exists_1 = require("../utils/compile-cypher-if-exists");
const Clause_1 = require("./Clause");
const WithPathAssign_1 = require("./mixins/WithPathAssign");
const WithFinish_1 = require("./mixins/clauses/WithFinish");
const WithMerge_1 = require("./mixins/clauses/WithMerge");
const WithReturn_1 = require("./mixins/clauses/WithReturn");
const WithWith_1 = require("./mixins/clauses/WithWith");
const WithDelete_1 = require("./mixins/sub-clauses/WithDelete");
const WithOrder_1 = require("./mixins/sub-clauses/WithOrder");
const WithRemove_1 = require("./mixins/sub-clauses/WithRemove");
const WithSet_1 = require("./mixins/sub-clauses/WithSet");
const Set_1 = require("./sub-clauses/Set");
const mixin_1 = require("./utils/mixin");
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/clauses/create/)
 * @category Clauses
 */
let Create = Create_1 = class Create extends Clause_1.Clause {
    constructor(pattern) {
        super();
        if (pattern instanceof Pattern_1.Pattern || pattern instanceof PathAssign_1.PathAssign) {
            this.pattern = pattern;
        }
        else {
            this.pattern = new Pattern_1.Pattern(pattern);
        }
        this.setSubClause = new Set_1.SetClause(this);
    }
    create(clauseOrPattern) {
        if (clauseOrPattern instanceof Create_1) {
            this.addNextClause(clauseOrPattern);
            return clauseOrPattern;
        }
        const matchClause = new Create_1(clauseOrPattern);
        this.addNextClause(matchClause);
        return matchClause;
    }
    /** @internal */
    getCypher(env) {
        const pathCypher = this.compilePath(env);
        if (pathCypher && this.pattern instanceof PathAssign_1.PathAssign) {
            throw new Error("Cannot generate CREATE, using assignTo and assignToPath at the same time is not supported");
        }
        const patternCypher = this.pattern.getCypher(env);
        const setCypher = (0, compile_cypher_if_exists_1.compileCypherIfExists)(this.setSubClause, env, { prefix: "\n" });
        const deleteStr = (0, compile_cypher_if_exists_1.compileCypherIfExists)(this.deleteClause, env, { prefix: "\n" });
        const removeCypher = (0, compile_cypher_if_exists_1.compileCypherIfExists)(this.removeClause, env, { prefix: "\n" });
        const orderByCypher = (0, compile_cypher_if_exists_1.compileCypherIfExists)(this.orderByStatement, env, { prefix: "\n" });
        const nextClause = this.compileNextClause(env);
        return `CREATE ${pathCypher}${patternCypher}${setCypher}${removeCypher}${deleteStr}${orderByCypher}${nextClause}`;
    }
};
exports.Create = Create;
exports.Create = Create = Create_1 = __decorate([
    (0, mixin_1.mixin)(WithReturn_1.WithReturn, WithSet_1.WithSet, WithPathAssign_1.WithPathAssign, WithWith_1.WithWith, WithDelete_1.WithDelete, WithRemove_1.WithRemove, WithMerge_1.WithMerge, WithFinish_1.WithFinish, WithOrder_1.WithOrder)
], Create);
