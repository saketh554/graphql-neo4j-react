import type { CypherEnvironment } from "../Environment";
import type { Variable } from "../references/Variable";
import type { Expr } from "../types";
import { Clause } from "./Clause";
import type { Create } from "./Create";
import type { Merge } from "./Merge";
import { WithCreate } from "./mixins/clauses/WithCreate";
import { WithMerge } from "./mixins/clauses/WithMerge";
import { WithReturn } from "./mixins/clauses/WithReturn";
import { WithWith } from "./mixins/clauses/WithWith";
import { WithDelete } from "./mixins/sub-clauses/WithDelete";
import { WithRemove } from "./mixins/sub-clauses/WithRemove";
import { WithSet } from "./mixins/sub-clauses/WithSet";
import type { DeleteClause } from "./sub-clauses/Delete";
import type { RemoveClause } from "./sub-clauses/Remove";
import type { SetClause } from "./sub-clauses/Set";
export interface Foreach extends WithWith, WithReturn, WithRemove, WithSet, WithDelete, WithCreate, WithMerge {
}
type ForeachClauses = Foreach | SetClause | RemoveClause | Create | Merge | DeleteClause;
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/clauses/foreach/)
 * @category Clauses
 */
export declare class Foreach extends Clause {
    private readonly variable;
    private readonly listExpr;
    private readonly mapClause;
    constructor(variable: Variable, listExpr: Expr, mapClause: ForeachClauses);
    /** @internal */
    getCypher(env: CypherEnvironment): string;
}
export {};
