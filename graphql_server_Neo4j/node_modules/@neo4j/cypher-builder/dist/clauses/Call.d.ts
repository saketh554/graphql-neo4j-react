import type { CypherEnvironment } from "../Environment";
import type { Variable } from "../references/Variable";
import { Clause } from "./Clause";
import { WithCreate } from "./mixins/clauses/WithCreate";
import { WithMatch } from "./mixins/clauses/WithMatch";
import { WithMerge } from "./mixins/clauses/WithMerge";
import { WithReturn } from "./mixins/clauses/WithReturn";
import { WithUnwind } from "./mixins/clauses/WithUnwind";
import { WithWith } from "./mixins/clauses/WithWith";
import { WithDelete } from "./mixins/sub-clauses/WithDelete";
import { WithOrder } from "./mixins/sub-clauses/WithOrder";
import { WithRemove } from "./mixins/sub-clauses/WithRemove";
import { WithSet } from "./mixins/sub-clauses/WithSet";
export interface Call extends WithReturn, WithWith, WithUnwind, WithSet, WithRemove, WithDelete, WithMatch, WithCreate, WithMerge, WithOrder {
}
type InTransactionConfig = {
    ofRows?: number;
    onError?: "continue" | "break" | "fail";
    concurrentTransactions?: number;
};
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/clauses/call-subquery/)
 * @category Clauses
 */
export declare class Call extends Clause {
    private readonly subquery;
    private _importWith?;
    private inTransactionsConfig?;
    private readonly variableScope?;
    private _optional;
    private _usingImportWith;
    constructor(subquery: Clause, variableScope?: Variable[] | "*");
    /** Adds a `WITH` statement inside `CALL {`, this `WITH` can is used to import variables outside of the subquery
     *  @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/subqueries/call-subquery/#call-importing-variables)
     */
    importWith(...params: Array<Variable | "*">): this;
    inTransactions(config?: InTransactionConfig): this;
    /** Makes the subquery an OPTIONAL CALL
     * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/subqueries/call-subquery/#optional-call)
     */
    optional(): this;
    /** @deprecated Use {@link importWith} instead */
    innerWith(...params: Array<Variable | "*">): this;
    /** @internal */
    getCypher(env: CypherEnvironment): string;
    private getSubqueryCypher;
    private generateVariableScopeStr;
    private generateInTransactionStr;
    private getOnErrorStr;
}
/**
 * @see [Cypher Documentation](https://neo4j.com/docs/cypher-manual/current/subqueries/call-subquery/#optional-call)
 * @category Clauses
 */
export declare class OptionalCall extends Call {
    constructor(subquery: Clause, variableScope?: Variable[] | "*");
}
export {};
