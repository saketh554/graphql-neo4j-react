import { Param } from "./references/Param";
import type { NamedReference, Variable } from "./references/Variable";
import type { CypherCompilable } from "./types";
export type EnvPrefix = {
    params?: string;
    variables?: string;
};
export type EnvConfig = {
    labelOperator: ":" | "&";
};
/** Hold the internal references of Cypher parameters and variables
 *  @group Internal
 */
export declare class CypherEnvironment {
    private readonly globalPrefix;
    private readonly references;
    private readonly params;
    readonly config: EnvConfig;
    /**
     *  @internal
     */
    constructor(prefix?: string | EnvPrefix, config?: Partial<EnvConfig>);
    compile(element: CypherCompilable): string;
    getReferenceId(reference: Variable | NamedReference): string;
    getParams(): Record<string, unknown>;
    addNamedParamReference(name: string, param: Param): void;
    addExtraParams(params: Record<string, Param>): void;
    getParamsSize(): number;
    private addParam;
    private addVariableReference;
    private isNamedReference;
}
